import pandas as pd
import streamlit as st
import numpy as np


def show_tableau(T, caption="", pivot: tuple[int, int] | None = None, basis_vars=None):
    """
    Mostra o tableau com formata√ß√£o aprimorada e √≠ndices corretos das vari√°veis b√°sicas.
    
    Args:
        T: Tableau do simplex (numpy array)
        caption: T√≠tulo/descri√ß√£o do tableau
        pivot: Tupla (linha, coluna) para destacar elemento pivot
        basis_vars: Lista de nomes das vari√°veis b√°sicas para os √≠ndices das linhas
    """
    rows, cols = T.shape
    n_slack = rows - 1
    n_vars = cols - n_slack - 1

    # Criar nomes das colunas (sem asteriscos)
    col_names = [f"x{i+1}" for i in range(n_vars)] + [f"s{i+1}" for i in range(n_slack)] + ["RHS"]

    # Criar nomes das linhas baseados nas vari√°veis b√°sicas reais
    if basis_vars and len(basis_vars) >= n_slack:
        # Usar as vari√°veis b√°sicas fornecidas
        row_names = ["Z"] + [var_name for var_name, _ in basis_vars[:n_slack]]
    else:
        # Fallback para o padr√£o antigo se n√£o tiver informa√ß√£o da base
        row_names = ["Z"] + [f"R{i+1}" for i in range(n_slack)]

    # Criar DataFrame
    df = pd.DataFrame(T, index=row_names, columns=col_names)

    # Aplicar formata√ß√£o
    styler = df.style.format("{:.3f}")
    
    # Destacar elemento pivot se fornecido
    if pivot and pivot != (-1, -1):
        pr, pc = pivot
        
        def highlight_pivot(data):
            """Aplica destaque ao elemento pivot, linha e coluna."""
            style_df = pd.DataFrame('', index=data.index, columns=data.columns)
            
            # Destacar elemento pivot em amarelo forte
            style_df.iloc[pr, pc] = 'background-color: #ffeb3b; font-weight: bold; border: 2px solid #f57f17;'
            
            # Destacar linha pivot em amarelo claro
            for col in range(cols):
                if col != pc:
                    style_df.iloc[pr, col] = 'background-color: #fff9c4;'
            
            # Destacar coluna pivot em amarelo claro
            for row in range(rows):
                if row != pr:
                    style_df.iloc[row, pc] = 'background-color: #fff9c4;'
            
            return style_df
        
        styler = styler.apply(highlight_pivot, axis=None)
    
    # Destacar linha Z (fun√ß√£o objetivo)
    def highlight_objective(data):
        style_df = pd.DataFrame('', index=data.index, columns=data.columns)
        for col in range(cols):
            if pivot is None or pivot == (-1, -1) or (0, col) != pivot:
                style_df.iloc[0, col] = 'background-color: #e3f2fd; font-weight: bold;'
        return style_df
    
    if pivot is None or pivot == (-1, -1):
        styler = styler.apply(highlight_objective, axis=None)

    # Mostrar caption se fornecido
    if caption:
        st.markdown(f"**{caption}**")
    
    # Exibir o tableau
    st.dataframe(styler, width='stretch')
    
    # Adicionar legenda explicativa se houver pivot
    if pivot and pivot != (-1, -1):
        st.markdown("""
        **Legenda:**
        - üü® **Amarelo Forte**: Elemento pivot
        - üü° **Amarelo Claro**: Linha e coluna do pivot
        - üîµ **Azul Claro**: Linha da fun√ß√£o objetivo (Z)
        """)


def show_tableau_with_basis_info(T, basis_vars=None, caption="", pivot=None):
    """
    Mostra o tableau com informa√ß√µes adicionais sobre a base.
    
    Args:
        T: Tableau do simplex
        basis_vars: Lista com tuplas (nome_variavel, valor) das vari√°veis b√°sicas
        caption: T√≠tulo do tableau
        pivot: Elemento pivot para destacar
    """
    # Mostrar tableau principal com √≠ndices corretos
    show_tableau(T, caption, pivot, basis_vars)
    
    # Mostrar informa√ß√µes da base se fornecidas
    if basis_vars:
        st.markdown("---")
        st.markdown("#### üìã **Status da Base Atual**")
        
        # Separar vari√°veis b√°sicas com valor significativo
        significant_vars = [(name, val) for name, val in basis_vars if abs(val) > 1e-6]
        zero_vars = [(name, val) for name, val in basis_vars if abs(val) <= 1e-6]
        
        if significant_vars:
            st.markdown("**Vari√°veis B√°sicas (‚â† 0):**")
            cols = st.columns(min(len(significant_vars), 4))
            for i, (var_name, value) in enumerate(significant_vars):
                with cols[i % len(cols)]:
                    if "x" in var_name:  # Vari√°vel de decis√£o
                        st.success(f"**{var_name}** = {value:.3f}")
                    else:  # Vari√°vel de folga
                        st.info(f"**{var_name}** = {value:.3f}")
        
        if zero_vars:
            zero_names = [name for name, _ in zero_vars]
            st.markdown(f"**Vari√°veis B√°sicas (= 0):** {', '.join(zero_names)}")


def extract_basis_variables(T, current_basis, n_original_vars):
    """
    Extrai informa√ß√µes das vari√°veis b√°sicas do tableau.
    
    Args:
        T: Tableau atual (numpy array)
        current_basis: Lista de √≠ndices das vari√°veis b√°sicas
        n_original_vars: N√∫mero de vari√°veis originais do problema
    
    Returns:
        Lista de tuplas (nome_variavel, valor)
    """
    basis_info = []
    
    for i, var_idx in enumerate(current_basis):
        # Determinar nome da vari√°vel
        if var_idx < n_original_vars:
            var_name = f"x{var_idx+1}"
        else:
            var_name = f"s{var_idx-n_original_vars+1}"
        
        # Obter valor da vari√°vel (RHS da linha correspondente)
        value = T[i+1, -1]  # i+1 porque a primeira linha √© Z
        
        basis_info.append((var_name, value))
    
    return basis_info


def create_iteration_summary(iteration_num, entering_var, leaving_var, pivot_element, ratios_info):
    """
    Cria um resumo visual da itera√ß√£o do Simplex.
    
    Args:
        iteration_num: N√∫mero da itera√ß√£o
        entering_var: Vari√°vel que entra na base
        leaving_var: Vari√°vel que sai da base
        pivot_element: Valor do elemento pivot
        ratios_info: Lista de informa√ß√µes sobre as raz√µes
    """
    st.markdown(f"### üîÑ Resumo da Itera√ß√£o {iteration_num}")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üî¥ Vari√°vel que Sai**")
        st.info(leaving_var)
    
    with col2:
        st.markdown("**‚ö° Elemento Pivot**")
        st.warning(f"{pivot_element:.3f}")
    
    with col3:
        st.markdown("**üü¢ Vari√°vel que Entra**")
        st.success(entering_var)
    
    # Mostrar informa√ß√µes das raz√µes diretamente (sem expander aninhado)
    if ratios_info:
        st.markdown("**üìä Detalhes do Teste da Raz√£o:**")
        for ratio_info in ratios_info:
            st.write(f"‚Ä¢ {ratio_info}")


def show_final_solution(solution, objective_value, basis_info=None, maximize=True):
    """
    Mostra a solu√ß√£o final de forma organizada e destacada.
    
    Args:
        solution: Lista com valores das vari√°veis
        objective_value: Valor √≥timo da fun√ß√£o objetivo
        basis_info: Informa√ß√µes sobre as vari√°veis b√°sicas
        maximize: Se o problema √© de maximiza√ß√£o
    """
    st.markdown("## üéâ Solu√ß√£o √ìtima Encontrada!")
    
    # Valor da fun√ß√£o objetivo
    st.metric(
        label=f"**Valor {'M√°ximo' if maximize else 'M√≠nimo'} da Fun√ß√£o Objetivo**",
        value=f"Z = {objective_value:.3f}",
        delta=None
    )
    
    # Valores das vari√°veis
    st.markdown("### üìä Valores das Vari√°veis")
    
    # Organizar em colunas para melhor visualiza√ß√£o
    n_vars = len(solution)
    cols_per_row = min(4, n_vars)
    rows_needed = (n_vars + cols_per_row - 1) // cols_per_row
    
    for row in range(rows_needed):
        cols = st.columns(cols_per_row)
        for col_idx in range(cols_per_row):
            var_idx = row * cols_per_row + col_idx
            if var_idx < n_vars:
                with cols[col_idx]:
                    value = solution[var_idx]
                    # Destacar vari√°veis b√°sicas (n√£o-zero) em verde
                    if abs(value) > 1e-6:
                        st.success(f"**x{var_idx+1} = {value:.3f}**")
                    else:
                        st.info(f"x{var_idx+1} = {value:.3f}")
    
    # Informa√ß√µes adicionais sobre a base
    if basis_info:
        st.markdown("### üîß Informa√ß√µes da Base Final")
        st.markdown("**Vari√°veis B√°sicas (diferentes de zero):**")
        
        basic_vars = [info for info in basis_info if abs(info[1]) > 1e-6]
        if basic_vars:
            for var_name, value in basic_vars:
                st.write(f"‚Ä¢ {var_name} = {value:.3f}")
        else:
            st.write("Todas as vari√°veis b√°sicas t√™m valor zero.")


def show_optimization_summary(method="Simplex", iterations=0, status="Optimal"):
    """
    Mostra um resumo do processo de otimiza√ß√£o.
    
    Args:
        method: M√©todo utilizado (Simplex, Branch&Bound, etc.)
        iterations: N√∫mero de itera√ß√µes realizadas
        status: Status final (Optimal, Unbounded, Infeasible, etc.)
    """
    st.markdown("### üìà Resumo da Otimiza√ß√£o")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("**M√©todo**", method)
    
    with col2:
        st.metric("**Itera√ß√µes**", iterations)
    
    with col3:
        # Escolher cor baseada no status
        if status == "Optimal":
            st.success(f"**Status:** {status}")
        elif status == "Unbounded":
            st.error(f"**Status:** {status}")
        elif status == "Infeasible":
            st.warning(f"**Status:** {status}")
        else:
            st.info(f"**Status:** {status}")


def analyze_tableau_basis(T, n_original_vars):
    """
    Analisa o tableau para identificar automaticamente as vari√°veis b√°sicas.
    
    Args:
        T: Tableau atual
        n_original_vars: N√∫mero de vari√°veis originais
    
    Returns:
        Lista de tuplas (nome_variavel, valor) das vari√°veis b√°sicas
    """
    basis_info = []
    rows, cols = T.shape
    
    # Para cada linha (exceto Z)
    for row_idx in range(1, rows):
        rhs_value = T[row_idx, -1]
        
        # Procurar coluna unit√°ria nesta linha
        for col_idx in range(cols - 1):  # Excluir RHS
            col = T[:, col_idx]
            
            # Verificar se √© coluna unit√°ria (um 1, resto zeros)
            if (abs(col[row_idx] - 1.0) < 1e-6 and 
                np.sum(np.abs(col) > 1e-6) == 1):
                
                # Determinar nome da vari√°vel
                if col_idx < n_original_vars:
                    var_name = f"x{col_idx+1}"
                else:
                    var_name = f"s{col_idx-n_original_vars+1}"
                
                basis_info.append((var_name, rhs_value))
                break
        else:
            # Se n√£o encontrou coluna unit√°ria, usar √≠ndice gen√©rico
            basis_info.append((f"R{row_idx}", rhs_value))
    
    return basis_info


def format_tableau_description(iteration_num, entering_var, leaving_var, ratios):
    """
    Formata a descri√ß√£o de uma itera√ß√£o do Simplex com markdown estruturado.
    
    Args:
        iteration_num: N√∫mero da itera√ß√£o
        entering_var: Vari√°vel que entra
        leaving_var: Vari√°vel que sai
        ratios: Lista de raz√µes calculadas
    
    Returns:
        String formatada em markdown
    """
    description = f"""
## üîÑ **ITERA√á√ÉO {iteration_num}**

### 1Ô∏è‚É£ **Sele√ß√£o da Vari√°vel que Entra**
‚Ä¢ **Crit√©rio:** Custo reduzido mais negativo
‚Ä¢ **Vari√°vel escolhida:** **{entering_var}**

### 2Ô∏è‚É£ **Teste da Raz√£o M√≠nima**
‚Ä¢ **Objetivo:** Determinar qual vari√°vel sai da base
‚Ä¢ **Raz√µes calculadas:**
"""
    
    for i, ratio in enumerate(ratios):
        if ratio == float('inf'):
            description += f"  - Linha {i+1}: ‚àû (entrada ‚â§ 0)\n"
        else:
            description += f"  - Linha {i+1}: {ratio:.3f}\n"
    
    description += f"""
### 3Ô∏è‚É£ **Sele√ß√£o da Vari√°vel que Sai**
‚Ä¢ **Menor raz√£o positiva:** Linha com **{leaving_var}**
‚Ä¢ **Motivo:** Evita viola√ß√£o das restri√ß√µes

### 4Ô∏è‚É£ **Opera√ß√£o de Pivoteamento**
‚Ä¢ **Resultado:** **{entering_var}** substitui **{leaving_var}** na base
"""
    
    return description